<?php



class USER extends Model implements IModel
{
	private $ID;
	private $USERNAME;
	private $PASSWORD;
	private $ROLE;
	private $PHOTO;
	private $NAME;
	private $LASTNAME;

	#region get/set
	//getters
	private function getID() { return $this->ID; }
	private function getUSERNAME() { return $this->USERNAME; }
	private function getPASSWORD() { return $this->PASSWORD; }
	private function getROLE() { return $this->ROLE; }
	private function getPHOTO() { return $this->PHOTO; }
	private function getNAME() { return $this->NAME; }
	private function getLASTNAME() { return $this->LASTNAME; }
	//setters
	private function setID($ID) { $this->ID = $ID; }
	private function setUSERNAME($USERNAME) { $this->USERNAME = $USERNAME; }
	private function setPASSWORD($PASSWORD) { $this->PASSWORD = $this->getHashedPassword($PASSWORD); }
	private function setROLE($ROLE) { $this->ROLE = $ROLE; }
	private function setPHOTO($PHOTO) { $this->PHOTO = $PHOTO; }
	private function setNAME($NAME) { $this->NAME = $NAME; }
	private function setLASTNAME($LASTNAME) { $this->LASTNAME = $LASTNAME; }

	private function getHashedPassword($password)
	{
		return password_hash($password, PASSWORD_DEFAULT, ['cost' => 5]);
	}

	public function __set($name,$value)
	{
		$function = 'set' . $name;
		return $this->$function($value);
	}

	public function __get($name)
	{
		$function = 'get'. $name; 
		return $this->$function();
	}
	#endregion

	public function __construct()
	{
		parent::__construct();
		$this->ID = '';
		$this->USERNAME = '';
		$this->PASSWORD = '';
		$this->ROLE = '';
		$this->PHOTO = '';
		$this->NAME = '';
		$this->LASTNAME = '';
	}

	public function Exists($username)
	{
		try
		{
			error_log('USER::Exist('.$username.')');
			$query = $this->prepare('SELECT * FROM USERS WHERE USERNAME = :USERNAME');
			$query->execute(['USERNAME' => $username]);

			error_log('USER::Exist() -> rowCount'.$query->rowCount());

			return ($query->rowCount() != 0);
		}
		catch (PDOException $ex)
		{
            error_log('USER::Exists->PDOException: '. $ex);
            return false;
        }
	}

	public function ComparePassword($password, $id)
	{
		try
		{
			$user = $this->Get($id);
			return password_verify($password, $user->PASSWORD);
		}
		catch (PDOException $ex)
		{
            error_log('USER::ComparePassword->PDOException: '. $ex);
            return false;
        }
	}

    public function Save() 
    {
        try
        {
            $query = $this->prepare('INSERT INTO USERS( ID,  USERNAME,  PASSWORD, ROLE, PHOTO,  NAME,  LASTNAME)
            VALUES(:ID, :USERNAME, :PASSWORD, :ROLE, :PHOTO, :NAME, :LASTNAME)');
			$query->execute([
				'ID' => $this->ID,
				'USERNAME' => $this->USERNAME,
				'PASSWORD' => $this->PASSWORD,
				'ROLE' => $this->ROLE,
				'PHOTO' => $this->PHOTO,
				'NAME' => $this->NAME,
				'LASTNAME' => $this->LASTNAME
            ]);

            return true;
        }
        catch (PDOException $ex)
		{
            error_log('USER::Save->PDOException: '. $ex);
            return false;
        }
    }

    public function GetAll() 
	{
		$result = [];

		try
		{
			$query = $this->query('SELECT * FROM USERS');

			while($entidad = $query->fetch(PDO::FETCH_ASSOC))
			{
				$item = new USER();
				$item->ID = $entidad['ID'];
				$item->USERNAME = $entidad['USERNAME'];
				$item->PASSWORD = $entidad['PASSWORD'];
				$item->ROLE = $entidad['ROLE'];
				$item->PHOTO = $entidad['PHOTO'];
				$item->NAME = $entidad['NAME'];
				$item->LASTNAME = $entidad['LASTNAME'];

				array_push($result, $item);
			}
			
			return $result;
		}
		catch(PDOException $ex)
		{
			error_log('USER::GetAll->PDOException: ' . $ex);
			return false;
		}
	}

    public function Get($id) 
	{
		try
		{
			$query = $this->prepare('SELECT * FROM USERS WHERE ID = :ID');
			$query->execute([
				'ID' => $id
			]);

			$user = $query->fetch(PDO::FETCH_ASSOC);
			$this->ID = $user['ID'];
			$this->USERNAME = $user['USERNAME'];
			$this->PASSWORD = $user['PASSWORD'];
			$this->ROLE = $user['ROLE'];
			$this->PHOTO = $user['PHOTO'];
			$this->NAME = $user['NAME'];
			$this->LASTNAME = $user['LASTNAME'];

			
			return $this;
		}
		catch(PDOException $ex)
		{
			error_log('USER::GetItem->PDOException: ' . $ex);
			return false;
		}
	}

    public function Delete($id) 
	{
		try
		{
			$query = $this->prepare('DELETE FROM USERS WHERE ID = :ID');
			$query->execute([
				'ID' => $id
			]);
			
			return true;
		}
		catch(PDOException $ex)
		{
			error_log('USER::DeleteItem->PDOException: ' . $ex);
			return false;
		}	
	}
    
    public function Update() 
	{
		try
		{
			$query = $this->prepare('UPDATE USERS SET USERNAME = :USERNAME, PASSWORD = :PASSWORD, ROLE = :ROLE, PHOTO = :PHOTO, NAME = :NAME, LASTNAME = :LASTNAME WHERE ID = :ID');
			$query->execute([
				'USERNAME' => $this->USERNAME,
				'PASSWORD' => $this->PASSWORD,
				'ROLE' => $this->ROLE,
				'PHOTO' => $this->PHOTO,
				'NAME' => $this->NAME,
				'LASTNAME' => $this->LASTNAME
			]);
			
			return true;
		}
		catch(PDOException $ex)
		{
			error_log('USER::UpdateItem->PDOException: ' . $ex);
			return false;
		}
	}

    public function From($data) 
	{
		$this->ID = $data['ID'];
		$this->USERNAME = $data['USERNAME'];
		$this->PASSWORD = $data['PASSWORD'];
		$this->ROLE = $data['ROLE'];
		$this->PHOTO = $data['PHOTO'];
		$this->NAME = $data['NAME'];
		$this->LASTNAME = $data['LASTNAME'];
	}
}
?>